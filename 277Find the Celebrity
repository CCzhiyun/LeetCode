Suppose you are at a party with n people (labeled from 0 to n - 1) and among them, there may exist one celebrity. The definition of a 
celebrity is that all the other n - 1people know him/her but he/she does not know any of them.Now you want to find out who the celebrity
is or verify that there is not one. The only thing you are allowed to do is to ask questions like: "Hi, A. Do you know B?" to get 
information of whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions as possible 
(in the asymptotic sense).

You are given a helper function bool knows(a, b) which tells you whether A knows B. Implement a function int findCelebrity(n), 
your function should minimize the number of calls to knows.

Note: There will be exactly one celebrity if he/she is in the party. Return the celebrity's label if there is a celebrity in the party. 
If there is no celebrity, return -1.

道题让我们在一群人中寻找名人，所谓名人就是每个人都认识他，他却不认识任何人，限定了只有1个或0个名人，
给定了一个API函数，输入a和b，用来判断a是否认识b，让我们尽可能少的调用这个函数，来找出人群中的名人。

方法：如果a认识b，则a不会是名人；如果a不认识b，则b不会是名人。因此每询问一次a是否认识b，都可以排除掉一个人，所以在O(n)时间内就可以排除掉n-1个人。
最后还要检查确认，是否其他人都认识这个人，以及这个人都不认识其他人。


public class Solution extends Relation {
    public int findCelebrity(int n) {
        int celebrity = 0;
        for(int i=1; i<n; i++) {
            if (knows(celebrity, i)) celebrity = i;
        }
        for(int i=0; i<n; i++) {
            if (celebrity != i && knows(celebrity, i)) return -1;
            if (celebrity != i && !knows(i, celebrity)) return -1;
        }
        return celebrity;
    }
